// D√©finition de la fonction principale qui initialise le dark mode
function initDarkMode() {
    // 1. V√©rification du localStorage
    // localStorage permet de stocker des donn√©es dans le navigateur
    // getItem('darkMode') r√©cup√®re la valeur associ√©e √† la cl√© 'darkMode'
    const darkMode = localStorage.getItem('darkMode');
    
    // 2. Cr√©ation du bouton
    // createElement cr√©e un nouvel √©l√©ment HTML
    const darkModeToggle = document.createElement('button');
    // Ajout de l'emoji lune/soleil comme contenu du bouton
    darkModeToggle.innerHTML = 'üåì';
    // Ajout de la classe CSS 'dark-mode-toggle' pour le style
    darkModeToggle.classList.add('dark-mode-toggle');
    // Ajout du bouton √† la fin du body
    document.body.appendChild(darkModeToggle);
    
    // 3. V√©rification de l'√©tat initial
    // Si le mode sombre √©tait activ√© lors de la derni√®re visite
    if (darkMode === 'enabled') {
        // Ajoute la classe 'darkmode' au body pour activer les styles sombres
        document.body.classList.add('darkmode');
    }
    
    // 4. Gestion des clics sur le bouton
    darkModeToggle.addEventListener('click', () => {
        // toggle inverse l'√©tat : ajoute la classe si absente, la retire si pr√©sente
        document.body.classList.toggle('darkmode');
        
        // 5. Sauvegarde de la pr√©f√©rence
        if (document.body.classList.contains('darkmode')) {
            // Si le mode sombre est activ√©, on sauvegarde 'enabled'
            localStorage.setItem('darkMode', 'enabled');
        } else {
            // Si le mode sombre est d√©sactiv√©, on efface la pr√©f√©rence
            localStorage.setItem('darkMode', null);
        }
    });
}

// 6. D√©clenchement de l'initialisation
// Attend que le DOM soit compl√®tement charg√© avant d'ex√©cuter initDarkMode
// Cela √©vite les erreurs si le JavaScript s'ex√©cute avant que la page soit pr√™te
document.addEventListener('DOMContentLoaded', initDarkMode);

// Nouvelle fonction pour le menu burger
function initBurgerMenu() {
    // 1. S√©lection et cr√©ation des √©l√©ments
    const burger = document.querySelector('.burger-menu');     // S√©lectionne le bouton burger
    const closeBtn = document.querySelector('.close-menu');       // S√©lectionne le bouton de fermeture
    const nav = document.querySelector('.nav-menu');          // S√©lectionne le menu de navigation
    const backdrop = document.createElement('div');           // Cr√©e un fond obscur pour le menu
    backdrop.classList.add('menu-backdrop');                  // Ajoute une classe au fond obscur
    document.body.appendChild(backdrop);                      // Ajoute le fond obscur au body

    // 2. Gestion du clic sur le bouton burger et ouvertur du menu
    burger.addEventListener('click', () => {
       // burger.classList.toggle('active');        // Active/d√©sactive l'animation du bouton
        nav.classList.add('active');          // Affiche/cache le menu
        document.body.classList.add('menu-open');
        burger.classList.add('hidden');       // Ajoute la classe pour cacher le bouton // Ajoute/retire la classe pour le style du body
    });

    //3. Fermeture du menu avec le bouton x
    closeBtn.addEventListener('click', () => {
        nav.classList.remove('active');
        document.body.classList.remove('menu-open');
        burger.classList.remove('hidden');    // R√©affiche le bouton burger
    });

    // 4. Gestion du clic sur le fond obscur (fermeture du menu)
    backdrop.addEventListener('click', () => {
        nav.classList.remove('active');          // Cache le menu
        document.body.classList.remove('menu-open'); // Retire la classe du body
        burger.classList.remove('hidden');        // D√©sactive l'animation du bouton
    });
}

// 4. Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', () => {
    initDarkMode();      // Initialise le mode sombre
    initBurgerMenu();    // Initialise le menu burger
});


//Formulaire de contact
// Fonction principale qui initialise et g√®re le formulaire de contact
function initContactForm() {
    // R√©cup√®re l'√©l√©ment modal (la fen√™tre popup) par son ID
    const modal = document.getElementById('contactModal');
    
    // Recherche le lien "Parlez √† nous i√ßi" parmi tous les liens qui pointent vers trompage.html
    // querySelectorAll trouve tous les liens, Array.from les convertit en tableau
    // find cherche le premier √©l√©ment qui contient exactement le texte voulu
    const contactBtn = Array.from(document.querySelectorAll('a[href="trompage.html"]'))
        .find(link => link.textContent.trim() === 'Parlez √† nous i√ßi');
    
    // R√©cup√®re le bouton de fermeture (√ó) dans le modal
    const closeBtn = modal.querySelector('.close-modal');
    
    // R√©cup√®re le formulaire lui-m√™me
    const form = document.getElementById('contactForm');

    // Si le bouton de contact existe
    if (contactBtn) {
        // Ajoute un √©couteur d'√©v√©nement pour le clic sur le bouton
        contactBtn.addEventListener('click', (e) => {
            e.preventDefault();  // Emp√™che le lien de rediriger vers trompage.html
            modal.classList.add('active');  // Affiche le modal en ajoutant la classe active
        });
    }

    // Gestion de la fermeture du modal via le bouton √ó
    closeBtn.addEventListener('click', () => {
        modal.classList.remove('active');  // Cache le modal en retirant la classe active
    });

    // Gestion de la soumission du formulaire
    form.addEventListener('submit', (e) => {
        e.preventDefault();  // Emp√™che l'envoi traditionnel du formulaire
        let isValid = true;  // Variable qui v√©rifie si tout le formulaire est valide

        // VALIDATION DU PR√âNOM
        const prenom = document.getElementById('prenom');  // R√©cup√®re le champ pr√©nom
        // V√©rifie si la longueur du pr√©nom est invalide (moins de 2 ou plus de 20 caract√®res)
        if (prenom.value.length < 2 || prenom.value.length > 20) {
            showError(prenom, 'Le pr√©nom doit contenir entre 2 et 20 caract√®res');
            isValid = false;  // Marque le formulaire comme invalide
        } else {
            clearError(prenom);  // Efface le message d'erreur si le pr√©nom est valide
        }

        // VALIDATION DU NOM (m√™me logique que le pr√©nom)
        const nom = document.getElementById('nom');
        if (nom.value.length < 2 || nom.value.length > 20) {
            showError(nom, 'Le nom doit contenir entre 2 et 20 caract√®res');
            isValid = false;
        } else {
            clearError(nom);
        }

        // VALIDATION DE L'EMAIL
        const email = document.getElementById('email');
        // Expression r√©guli√®re qui v√©rifie le format de l'email
        // V√©rifie qu'il y a : du texte @ du texte . du texte
       // Expression r√©guli√®re (RegEx) pour valider le format d'un email
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        // D√©composition de la RegEx :
        // ^ : d√©but de la cha√Æne
        // [^\s@]+ : un ou plusieurs caract√®res qui ne sont ni un espace ni @
        // @ : le symbole @ obligatoire
        // [^\s@]+ : un ou plusieurs caract√®res qui ne sont ni un espace ni @
        // \. : un point (√©chapp√© avec \)
        // [^\s@]+ : un ou plusieurs caract√®res qui ne sont ni un espace ni @
        // $ : fin de la cha√Æne

        // Test si la valeur de l'email ne correspond PAS au format attendu
        if (!emailRegex.test(email.value)) {
            // Si l'email est invalide :
            // Affiche le message d'erreur sous le champ
            showError(email, 'Veuillez entrer une adresse email valide');
            // Marque le formulaire comme invalide
            isValid = false;
        } else {
            // Si l'email est valide :
            // Efface le message d'erreur
            clearError(email);
        }

        // VALIDATION DU MESSAGE
        const message = document.getElementById('message');
        // V√©rifie la longueur du message (entre 2 et 500 caract√®res)
        if (message.value.length < 2 || message.value.length > 500) {
            showError(message, 'Le message doit contenir entre 2 et 500 caract√®res');
            isValid = false;
        } else {
            clearError(message);
        }

        // Si tout est valide
        if (isValid) {
            modal.classList.remove('active');  // Ferme le modal
            form.reset();  // R√©initialise le formulaire
        }
    });
}

// Fonction qui affiche un message d'erreur sous un champ
function showError(element, message) {
    // R√©cup√®re l'√©l√©ment qui suit le champ (span.error-message)
    const errorElement = element.nextElementSibling;
    errorElement.textContent = message;  // Affiche le message d'erreur
}

// Fonction qui efface le message d'erreur sous un champ
function clearError(element) {
    const errorElement = element.nextElementSibling;
    errorElement.textContent = '';  // Efface le message d'erreur
}

// Lance l'initialisation du formulaire quand la page est enti√®rement charg√©e
document.addEventListener('DOMContentLoaded', initContactForm);